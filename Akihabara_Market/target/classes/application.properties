# Configuraci�n de la Base de Datos H2 para persistencia en archivo
# La URL apunta a un archivo en la carpeta 'data' de tu proyecto.
# Si la carpeta 'data' no existe, H2 la crear� autom�ticamente.
spring.datasource.url=jdbc:h2:file:./data/akihabara_market_db
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# Configuraci�n de JPA (Java Persistence API)
spring.jpa.show-sql=true
# 'update' intentar� actualizar el esquema de la base de datos sin borrar datos existentes.
# Esto es crucial para la persistencia de los datos entre reinicios.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.defer-datasource-initialization=true
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Habilita la consola H2 para verificar los datos (opcional, �til para desarrollo)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# Configuraci�n para la inicializaci�n de la base de datos con data.sql
# 'always' ejecutar� data.sql en cada inicio.
# Para este caso, si los datos ya existen, no se reinsertar�n si los IDs son autogenerados.
# Si tu data.sql tiene IDs fijos, considera usar INSERT IGNORE o una estrategia diferente.
spring.sql.init.mode=always

# Configuraci�n del servidor
server.port=8080

# Configuraci�n de SpringDoc OpenAPI (Swagger)
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.display-request-duration=true
